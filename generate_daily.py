"""generate_daily.py

Create a date-stamped Python snippet in ./daily/ and optionally commit it.

Usage:
    python generate_daily.py [--message "Commit message"] [--commit]

Notes:
- This script will NOT push to remote automatically. To push to GitHub, configure
  authentication locally (ssh keys or credential helper) and run `git push`.
"""

from __future__ import annotations

import argparse
from datetime import datetime
from pathlib import Path
import subprocess
import sys

ROOT = Path(__file__).resolve().parent
DAILY_DIR = ROOT / "daily"
TEMPLATE = """# Daily snippet for {date_iso}
"""


def snippet_template(date_iso: str) -> str:
    return f'''"""Daily snippet for {date_iso}

This file was generated by generate_daily.py
"""

from datetime import datetime


def run():
    print("This is a generated daily snippet.")
    print(f"Generated date: {date_iso}")
    print(f"Now: {datetime.now().isoformat()}")


if __name__ == "__main__":
    run()
'''


def make_snippet(date: datetime) -> Path:
    DAILY_DIR.mkdir(exist_ok=True)
    filename = f"daily_{date.strftime('%Y-%m-%d')}.py"
    path = DAILY_DIR / filename
    if path.exists():
        print(f"Snippet already exists: {path}")
        return path
    content = snippet_template(date.isoformat())
    path.write_text(content, encoding="utf-8")
    print(f"Created snippet: {path}")
    return path


def git_commit(path: Path, message: str) -> None:
    # Stage and commit the file locally. Do not push.
    try:
        subprocess.run(["git", "add", str(path)], check=True)
        subprocess.run(["git", "commit", "-m", message], check=True)
        print("Committed to local git repository.")
    except subprocess.CalledProcessError as e:
        print("Git command failed:", e)


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("--commit", action="store_true", help="Create a local git commit")
    parser.add_argument("--message", default=None, help="Commit message (defaults to filename)")
    args = parser.parse_args(argv)

    now = datetime.now()
    path = make_snippet(now)

    if args.commit:
        msg = args.message or f"chore: add daily snippet {path.name}"
        git_commit(path, msg)

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
